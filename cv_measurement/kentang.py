# -*- coding: utf-8 -*-
"""Kentang.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o_OCqD71uStM7Lsrv46C3WG7z1r9_he2

# Mount
"""

# refresh or remount drive
from google.colab import drive
drive.flush_and_unmount()

# connect to drive:
from google.colab import drive
drive.mount('/content/drive')

"""# Imports"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
import os
import random

img_path = "/content/drive/MyDrive/Colab Notebooks/Sample Akar"

# select random image from folder path:
img_name = random.choice(os.listdir(img_path))
print(img_name)

# show image:
# im_path = os.path.join(img_path, img_name)
img = cv2.imread(im_path_2)
plt.imshow(img)

def crop_img(img):
  # crop image:
  crop_img = img[:,700:1400]
  plt.imshow(crop_img)
  return crop_img

# crop image:
crop_im = crop_img(img)

def apply_clahe(img):
  # apply CLAHE to image:
  clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))

  # convert the cropped image to grayscale
  gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

  cl1 = clahe.apply(gray_img)

  plt.imshow(cl1, cmap=plt.get_cmap('gray'))

  return cl1

cl1 = apply_clahe(crop_im)

def binarize(img):
  # binarize image:
  ret, th1 = cv2.threshold(cl1, 190, 255, cv2.THRESH_BINARY)
  plt.imshow(th1, cmap=plt.get_cmap('gray'))
  return th1

def adaptive_threshold(img):
  # convert the image to grayscale if it's not already
  if len(img.shape) > 2:
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
  # ensure the image data type is uint8
  img = img.astype('uint8')
  # apply adaptive thresholding
  th = cv2.adaptiveThreshold(img, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 121, 1)
  plt.imshow(th, cmap=plt.get_cmap('gray'))
  return th

# binarize
# th1 = binarize(cl1)
th1 = binarize(crop_im)

# adaptive thresholding:
# th2 = adaptive_threshold(cl1)
th2 = adaptive_threshold(crop_im)

def closing(img):
  kernel = np.ones((3,3),np.uint8)
  closing = cv2.morphologyEx(img, cv2.MORPH_CLOSE, kernel)
  plt.imshow(closing, cmap=plt.get_cmap('gray'))
  return closing

def opening(img):
  kernel = np.ones((3,3),np.uint8)
  opening = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)
  plt.imshow(opening, cmap=plt.get_cmap('gray'))
  return opening

im_close = closing(th2)
im_open = opening(th2)

def show_segment(img,th,alpha=0.5,lim=1200):
  status = None
  colors=[(255,0,0),(0,255,0)]

  # show biggest segment:
  contours, hierarchy = cv2.findContours(th, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
  cnt = max(contours, key=cv2.contourArea)
  x, y, w, h = cv2.boundingRect(cnt)

  if y+h > lim:
    color = colors[1]
    status = True
  else:
    color = colors[0]
    status = False

  # Create a mask for the largest contour
  mask = img.copy()
  cv2.drawContours(mask, [cnt], -1, color, -1)
  result = cv2.addWeighted(img,alpha,mask,1-alpha,0)

  # draw bounding box:
  rect_img = result.copy()
  cv2.rectangle(rect_img, (x, y), (x + w, y + h), color, 2)

  # Draw the horizontal line
  cv2.line(rect_img, (0, lim), (img.shape[1], lim), (0,0,255), 3)

  # show image:
  plt.imshow(rect_img)
  print(x,y,w,h)
  return status

"""# Main Program"""

def check_length(im_path):
  img = cv2.imread(im_path)
  crop_im = crop_img(img)
  cl1 = apply_clahe(crop_im)
  th2 = adaptive_threshold(cl1)
  im_open = opening(th2)
  status = show_segment(crop_im,im_open)
  return status

im_path = os.path.join(img_path, img_name)
check_length(im_path)

# select random image from folder path:
img_name = random.choice(os.listdir(img_path))
im_path_2 = os.path.join(img_path, img_name)
check_length(im_path_2)

# select random image from folder path:
img_name = random.choice(os.listdir(img_path))
im_path_3 = os.path.join(img_path, img_name)
check_length(im_path_3)

# select random image from folder path:
img_name = random.choice(os.listdir(img_path))
im_path_4 = os.path.join(img_path, img_name)
check_length(im_path_4)

# select random image from folder path:
img_name = random.choice(os.listdir(img_path))
im_path_5 = '/content/drive/MyDrive/Colab Notebooks/Sample Akar/2024-07-26_08-52-33.jpg'
check_length(im_path_5)

# binarize image
ret, th1 = cv2.threshold(cl1, 170, 255, cv2.THRESH_BINARY)
plt.imshow(th1, cmap=plt.get_cmap('gray'))

show_segment(crop_img,th1)